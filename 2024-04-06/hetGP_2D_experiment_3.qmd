---
title: "2D benchmark functions experiment based on Laplace method"
editor: visual
author: "Zhu Huanyan"
format: html
---

```{r, setup}
#| echo: false
#| warning: false
library(rgl)
library(hetGP)
library(optimx)
library(mvtnorm)
library(DiceDesign)

knitr::knit_hooks$set(webgl = hook_webgl)
set.seed(1234)
```

```{r}
#| echo: false
# benchmark functions
# https://en.wikipedia.org/wiki/Test_functions_for_optimization
sphere_func <- function(x) {
    return(sum(x^2))
}

ackley_func <- function(x) {
    return(-20 * exp(-0.2 * sqrt(0.5 * sum(x^2))) - exp(0.5 * sum(cos(2 * pi * x))) + exp(1) + 20)
}

rastrigin_func <- function(x, A = 10) {
    n <- length(x)
    return(A * n + sum(x^2) - A * sum(cos(2 * pi * x)))
}

gaussian_pdf_func <- function(x) {
    f1 <- dmvnorm(x, mean = c(0.25, 0.75), sigma = diag(rep(0.01, 2)))
    f2 <- dmvnorm(x, mean = c(0.75, 0.25), sigma = diag(rep(0.01, 2)))

    return(f1 - f2)
}

rastrigin_adj_func <- function(x) {
    return(sum(cos(8 * pi * x / (x + 0.2))) + sum(x^2))
}

# real function with constant noise = 0.01
y <- function(f, x) {
    return(f(x) + rnorm(1, sd = 0.01))
}
```

```{r}
#| echo: false
# pdf of input covariate X
h <- function(x, dist) {
    if (dist == "unif"){
        return(1) # uniform(0, 1)
    }
    if (dist == "norm"){
        return(exp(-(x - 0.5)^2 / (2 * 0.1^2))) # norm(0.5, 0.1)
    }
    if (dist == "beta"){
        return(((x + 10^-6)^(-0.5)) * ((1 - x + 10^-6)^1)) # beta(0.5, 2)
    }
    return(1)
}

# Approximation of objective function based on Laplace method
Laplace_method_mv <- function(par, XN, dist = "unif", cov_type = "Gaussian", nu.hat = 1, theta = c(0.5, 0.5), noise = 0.01) {
    d <- ncol(XN)

    X <- matrix(par, nrow = 1) # x
    XN1 <- matrix(par, nrow = 1) # xn+1

    K1 <- nu.hat * cov_gen(X1 = X, X2 = XN1, theta = theta, type = cov_type) # k(x, xn+1)
    KX <- nu.hat * cov_gen(X1 = X, X2 = XN, theta = theta, type = cov_type) # kn(x)
    K <- nu.hat * cov_gen(X1 = XN, theta = theta, type = cov_type) + diag(rep(noise, dim(XN)[1])) # Kn
    Kn <- nu.hat * cov_gen(X1 = XN1, X2 = XN, theta = theta, type = cov_type) # kn(xn+1)

    L <- t(chol(K)) # K = L L^T
    u <- solve(L, t(Kn)) # L^(-1) kn(xn+1)

    v0 <- solve(L, t(KX)) # L^(-1) kn(x)

    sigma2 <- nu.hat + noise - t(u) %*% u

    g <- K1 - t(u) %*% v0

    gd <- rep(0, d)
    H <- matrix(rep(0, d^2), nrow = d)
    for (k in 1:d) {
        v1 <- solve(L, t((X[k] - XN[, k]) * KX)) # L^(-1) diag(X[k] - XN[,k]) kn(x)
        gd <- -2 / theta[k] * (X[k] - XN1[k]) * K1 + 2 / theta[k] * t(u) %*% v1
    }

    for (i in 1:d) {
        gdi <- -2 / theta[i] * (X[i] - XN1[i]) * K1 + 2 / theta[i] * t(u) %*% v1

        for (j in i:d) {
            if (i == j) {
                v2 <- solve(L, t((X[i] - XN[, i])^2 * KX)) # L^(-1) diag(X[i] - XN[,i])^2 kn(x)
                gdii <- -2 / theta[i] * K1 + 4 / theta[i]^2 * (X[i] - XN1[i])^2 * K1 + 2 / theta[i] * t(u) %*% v0 - 4 / theta[i]^2 * t(u) %*% v2

                H[i, j] <- -(gdi / g)^2 + gdii / g
            } else {
                gdj <- -2 / theta[j] * (X[j] - XN1[j]) * K1 + 2 / theta[j] * t(u) %*% v1

                v3 <- solve(L, t((X[i] - XN[, i]) * (X[j] - XN[, j]) * KX)) # L^(-1) diag((X[i] - XN[,i])(X[j] - XN[, j])) kn(x)

                gdij <- 4 / theta[j]^2 * (X[i] - XN1[i]) * (X[j] - XN1[j]) * K1 - 4 / theta[j]^2 * t(u) %*% v3

                H[j, i] <- -gdi * gdj / g^2 + gdij / g
                H[j, i] <- H[i, j]
            }
        }
    }

    I <- -1 / sigma2 * pi^(d / 2) * prod(apply(X, 2, h, dist = dist)) * g^2 / sqrt(as.numeric(determinant(H, logarithm = FALSE)$modulus))
    return(I)
}

# mean of GP conditional distribution
predict_mean <- function(X0, XN, Y, cov_type = "Gaussian", nu.hat = 1, theta = c(0.5, 0.5), noise = 0.01) {
    x0 <- matrix(X0, nrow = 1)
    KX <- nu.hat * cov_gen(X1 = x0, X2 = XN, theta = theta, type = cov_type)

    K <- nu.hat * cov_gen(X1 = XN, theta = theta, type = cov_type) + diag(rep(noise, dim(XN)[1]))

    L <- t(chol(K))
    v <- solve(L, t(KX))
    u <- solve(L, Y)
    return(t(v) %*% u)
}
```

```{r}
#| echo: false
train_Laplace <- function(XN, Y, mod, f, step = 50, dist = "unif") {
    theta <- mod$theta
    nu.hat <- mod$nu_hat
    noise <- mod$g

    start <- Sys.time()
    for (k in 1:step) {
        out <- multistart(
            Xstart,
            Laplace_method_mv,
            method = "L-BFGS-B",
            lower = rep(0, d), upper = rep(1, d),
            dist = dist, XN = XN, cov_type = cov_type, nu.hat = nu.hat, theta = theta, noise = noise
        )

        Xnew <- matrix(c(out$p1[which.min(out$value)], out$p2[which.min(out$value)]), nrow = 1)
        Ynew <- apply(Xnew, 1, y, f = f)

        XN <- rbind(XN, Xnew)
        Y <- c(Y, Ynew)

        mod <- update(mod, Xnew = Xnew, Znew = Ynew, ginit = mod$g * 1.01)
        theta <- mod$theta
        nu.hat <- mod$nu_hat
        noise <- mod$g

        # print(sprintf("iteration: %d, Xnew: (%f, %f), theta: (%f, %f), nu_hat: %f, noise: %f", k, Xnew[1], Xnew[2], theta[1], theta[2], nu.hat, noise))
    }
    print(sprintf("Laplace train time: %f", Sys.time() - start))

    return(list(X_seq = XN, Y_seq = Y, nu.hat = nu.hat, theta = theta, noise = noise))
}

train_IMSPE <- function(XN, Y, mod, f, step = 50) {
    theta <- mod$theta
    nu.hat <- mod$nu_hat
    noise <- mod$g

    start <- Sys.time()
    for (k in 1:step) {
        out <- IMSPE_optim(mod, h = 2)

        Xnew <- matrix(out$par, nrow = 1)
        Ynew <- apply(Xnew, 1, y, f = f)
        XN <- rbind(XN, Xnew)
        Y <- c(Y, Ynew)

        mod <- update(mod, Xnew = Xnew, Znew = Ynew, ginit = mod$g * 1.01)
        theta <- mod$theta
        nu.hat <- mod$nu_hat
        noise <- mod$g

        # print(sprintf("iteration: %d, Xnew: (%f, %f), theta: (%f, %f), nu_hat: %f, noise: %f", k, Xnew[1], Xnew[2], theta[1], theta[2], nu.hat, noise))
    }
    print(sprintf("IMSE train time: %f", Sys.time() - start))

    return(list(X_seq = XN, Y_seq = Y, nu.hat = nu.hat, theta = theta, noise = noise))
}
```


```{r}
#| echo: false
d <- 2
multi_start <- 20
N <- 20
cov_type <- "Gaussian"

# initial input X
x1 <- runif(N, 0, 1)
x2 <- runif(N, 0, 1)
X_runif <- cbind(x1, x2)

x1 <- rnorm(N, 0.5, 0.1)
x2 <- rnorm(N, 0.5, 0.1)
X_norm <- cbind(x1, x2)

x1 <- rbeta(N, 1.5, 4)
x2 <- rbeta(N, 1.5, 4)
X_beta <- cbind(x1, x2)

# multistart points
Xstart <- maximinSA_LHS(lhsDesign(multi_start, 2, seed = 2024)$design)$design
# plot(Xstart)
```


```{r}
#| echo: false
# sample path of real function
x1 <- runif(5000, 0, 1)
x2 <- runif(5000, 0, 1)
xgrid <- cbind(x1, x2)

run <- function(X0, f, dist, step = 50){
    Y0 <- apply(X0, 1, y, f = f)

    # sample path of real function
    z <- apply(xgrid, 1, f)

    # fit model parameters by MLE
    mod <- mleHomGP(X = X0, Z = Y0, covtype = cov_type)

    res_Laplace <- train_Laplace(X0, Y0, mod, f, step, dist = dist)
    res_IMSPE <- train_IMSPE(X0, Y0, mod, f, step)

    # predict mean of GP trained by Laplace method
    pm1 <- apply(xgrid, 1, predict_mean, XN = res_Laplace$X_seq, Y = res_Laplace$Y_seq, cov_type = cov_type, nu.hat = res_Laplace$nu.hat, theta = res_Laplace$theta, noise = res_Laplace$noise)
    print(sprintf("rmse1: %f", mean((pm1 - z)^2)))
    # predict mean of GP trained by hetGP.IMSPE
    pm2 <- apply(xgrid, 1, predict_mean, XN = res_IMSPE$X_seq, Y = res_IMSPE$Y_seq, cov_type = cov_type, nu.hat = res_IMSPE$nu.hat, theta = res_IMSPE$theta, noise = res_IMSPE$noise)
    print(sprintf("rmse2: %f", mean((pm2 - z)^2)))

    plot(res_Laplace$X_seq[, 1], res_Laplace$X_seq[, 2]) + points(X0[, 1], X0[, 2], col = "red")
    plot(res_IMSPE$X_seq[, 1], res_IMSPE$X_seq[, 2]) + points(X0[, 1], X0[, 2], col = "red")

    return(list(z = z, pm1 = pm1, pm2 = pm2))
}
```

### 7.3 beta[0.5, 2]
```{r}
X0 <- X_beta
print(X0)

dist <- "beta"
step <- 50
```

#### 7.3.1 sphere_func
```{r}
f <- sphere_func
res <- run(X0, f, dist = dist, step = step)
```

```{r, webgl=TRUE}
plot3d(x1, x2, res$z, zlab = "real function")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm1, zlab = "Laplace")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm2, zlab = "IMSPE")
```

#### 7.3.2 ackley_func
```{r}
f <- ackley_func
res <- run(X0, f, dist = dist, step = step)
```

```{r, webgl=TRUE}
plot3d(x1, x2, res$z, zlab = "real function")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm1, zlab = "Laplace")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm2, zlab = "IMSPE")
```

#### 7.3.3 rastrigin_func
```{r}
f <- rastrigin_func
res <- run(X0, f, dist = dist, step = step)
```

```{r, webgl=TRUE}
plot3d(x1, x2, res$z, zlab = "real function")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm1, zlab = "Laplace")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm2, zlab = "IMSPE")
```

#### 7.3.4 gaussian_pdf_func
```{r}
f <- gaussian_pdf_func
res <- run(X0, f, dist = dist, step = step)
```

```{r, webgl=TRUE}
plot3d(x1, x2, res$z, zlab = "real function")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm1, zlab = "Laplace")
```
```{r, webgl=TRUE}
plot3d(x1, x2, res$pm2, zlab = "IMSPE")
```
